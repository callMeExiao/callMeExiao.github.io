import{_ as a,c as n,b as p,o as e}from"./app-DqRurxSm.js";const l={};function c(i,s){return e(),n("div",null,[...s[0]||(s[0]=[p(`<p>入职新工作接触到了Docker 很高兴终于能干中学Docker了 所以这里就简单记录一下Docker的基础概念</p><p>OK Let&#39;s Dive in!🤿</p><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><p>以下是使用Docker的企业级应用发布流程</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid" data-title="mermaid"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>flowchart</span><span class="space"> </span><span>TB</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>subgraph</span><span class="space"> </span><span>Dev[开发环境]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>A[Dockerfile]</span><span class="space"> </span><span>--&gt;</span><span class="space"> </span><span>B[docker</span><span class="space"> </span><span>build]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>B</span><span class="space"> </span><span>--&gt;</span><span class="space"> </span><span>C[Image</span><span class="space"> </span><span>v1.0]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>end</span></span>
<span class="line"><span></span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>subgraph</span><span class="space"> </span><span>CI[持续集成]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>C</span><span class="space"> </span><span>--&gt;</span><span class="space"> </span><span>D[Registry</span><span class="space"> </span><span>push]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>D</span><span class="space"> </span><span>--&gt;</span><span class="space"> </span><span>E[安全扫描]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>E</span><span class="space"> </span><span>--&gt;</span><span class="space"> </span><span>F[Image</span><span class="space"> </span><span>v1.0-prod]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>end</span></span>
<span class="line"><span></span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>subgraph</span><span class="space"> </span><span>Prod[生产环境]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>F</span><span class="space"> </span><span>--&gt;</span><span class="space"> </span><span>G[docker</span><span class="space"> </span><span>pull]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>G</span><span class="space"> </span><span>--&gt;</span><span class="space"> </span><span>H[Container]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>H</span><span class="space"> </span><span>--&gt;</span><span class="space"> </span><span>I[监控数据]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>I</span><span class="space"> </span><span>--&gt;</span><span class="space"> </span><span>J[异常报警]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>J</span><span class="space"> </span><span>--&gt;</span><span class="space"> </span><span>K[回滚到</span><span class="space"> </span><span>v0.9]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>end</span></span>
<span class="line"><span></span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>K</span><span class="space"> </span><span>--&gt;|从Registry获取|</span><span class="space"> </span><span>M[Image</span><span class="space"> </span><span>v0.9]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A：开发Dockerfile 定义应用环境</p><p>B：构建可重复的镜像（Image）</p><p>D：推送至仓库（Registry）进行版本管理</p><p>H：拉取镜像并实例化为容器（Container）</p><p>I：基于容器状态监控与调控</p><h3 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>DockerFile</span></a></h3><p>Dockerfile 是指令集合，描述了如何从头开始构建一个可运行的 Docker 镜像层堆栈。</p><h4 id="镜像分层与联合文件系统" tabindex="-1"><a class="header-anchor" href="#镜像分层与联合文件系统"><span>镜像分层与联合文件系统</span></a></h4><ul><li>层式结构：镜像由只读层（Read-Only Layers） 堆叠构成，每层记录文件系统的增量变更（文件增删改）。Dockerfile 中每条产生文件变更的指令（如 RUN, COPY, ADD）均生成新层。</li><li>联合挂载：运行时通过联合文件系统（如 Overlay2）将多层合并为单一视图，容器进程感知完整的文件系统。</li><li>写时复制(CoW)：容器启动时创建可写容器层（Container Layer） ，所有写入操作均在此层隔离处理，原始镜像层保持不可变。</li></ul><h4 id="构建上下文-build-context" tabindex="-1"><a class="header-anchor" href="#构建上下文-build-context"><span>构建上下文(Build Context)</span></a></h4><p>在使用 docker build 命令创建镜像时，会产生一个 Build Context。即 docker build 命令的 PATH 或 URL 指定路径中的文件的集合，并且指定路径下的所有文件（含子目录）会被压缩为 tar 包发送至 Docker 引擎。 这意味着 .dockerignore 文件至关重要，它用于排除不需要发送给守护进程的文件（如本地开发配置文件、日志、.git目录、node_modules等），减少上下文大小，加快构建速度，避免敏感信息泄露。 在镜像 build 过程中可以引用上下文中的任何文件，比如COPY 和 ADD 命令，就可以引用上下文中的文件。</p><h4 id="关键指令" tabindex="-1"><a class="header-anchor" href="#关键指令"><span>关键指令</span></a></h4><ul><li><p>FROM：指定基础镜像。你的构建将基于这个镜像进行。</p><ul><li>语法：FROM [--platform=&lt;platform&gt;] &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]</li><li>最佳实践： <ul><li>总是指定明确的镜像标签（:后部分），避免使用默认的latest标签（它可能会意外更新），以确保构建的可重复性。例如：FROM python:3.11-slim-bullseye。</li><li>优先选择官方、稳定、安全、体积小的基础镜像（如 *-alpine, *-slim 变体）。</li><li>多阶段构建时，使用 AS 给阶段命名（后面 COPY --from= 会用到）。</li></ul></li><li>示例：FROM ubuntu:22.04 或 FROM node:18-bullseye-slim AS build-stage</li></ul></li><li><p>WORKDIR：为后续的 RUN, CMD, ENTRYPOINT, COPY, ADD 指令设置工作目录。如果目录不存在会自动创建。</p><ul><li>语法：WORKDIR /path/to/workdir</li><li>最佳实践： <ul><li>总是使用绝对路径。</li><li>在构建过程中需要切换目录时使用，避免在命令行里写大量 cd ... &amp;&amp; ...。</li><li>通常设置在应用程序代码存放的目录。</li></ul></li><li>示例：WORKDIR /app</li></ul></li><li><p>COPY&amp;ADD：将本地文件或目录从构建上下文复制到镜像内。</p><ul><li>语法：COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt; 或 COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;src&gt;&quot;, ... &quot;&lt;dest&gt;&quot;] （支持通配符 *）</li><li>区别： <ul><li>COPY：推荐优先使用！功能纯粹：复制本地文件 / 目录。语法更清晰。</li><li>ADD：功能更多但更复杂： <ul><li>可以自动解压缩本地 src 中的 tar 归档文件。</li><li>可以从 URL 下载并复制文件到镜像（但强烈不建议从 URL 直接下载，因为这会破坏构建缓存、需要网络且可能不稳定，应使用RUN curl/wget下载并清理）。</li></ul></li></ul></li><li>最佳实践： <ul><li>几乎总是使用 COPY。</li><li>只在需要自动解压 tar 文件到镜像时才用 ADD。</li><li>避免使用 ADD 从 URL 下载文件。</li><li>使用 --chown 设置复制文件的所有权（如果非默认用户）。</li></ul></li></ul></li><li><p>RUN：在构建镜像过程中执行命令。通常是安装软件包、编译代码、运行脚本等。</p><ul><li>语法：RUN (shell 形式) 或 RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (exec 形式)</li><li>最佳实践： <ul><li>尽量将相关操作合并成一个RUN指令（使用 &amp;&amp; 连接命令，\\ 换行），避免创建过多不必要的中间层。</li><li>清理安装缓存 (apt-get clean, rm -rf /var/lib/apt/lists/*, yum clean all, npm cache clean --force 等) 在同一个 RUN 指令中完成。</li><li>明确指定安装包的版本 (apt-get install -y package=version)，避免意外更新。</li><li>处理 apt-get update 失败情况：RUN apt-get update &amp;&amp; apt-get install -y ...（在同一指令中）。</li></ul></li><li>示例：<div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>RUN</span><span class="space"> </span><span>apt-get</span><span class="space"> </span><span>update</span><span class="space"> </span><span>\\</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>&amp;&amp;</span><span class="space"> </span><span>apt-get</span><span class="space"> </span><span>install</span><span class="space"> </span><span>-y</span><span class="space"> </span><span>--no-install-recommends</span><span class="space"> </span><span>\\</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>ca-certificates</span><span class="space"> </span><span>\\</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>curl</span><span class="space"> </span><span>\\</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>git</span><span class="space"> </span><span>\\</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>&amp;&amp;</span><span class="space"> </span><span>rm</span><span class="space"> </span><span>-rf</span><span class="space"> </span><span>/var/lib/apt/lists/*</span><span class="space"> </span><span>\\</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>&amp;&amp;</span><span class="space"> </span><span>apt-get</span><span class="space"> </span><span>clean</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>EXPOSE：声明容器运行时监听的端口（仅为元数据，不实际开放端口，需通过 docker run -p 映射宿主端口）。</p><ul><li>语法：EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</li><li>最佳实践：声明应用程序实际监听的端口，作为文档并方便使用者知道需要映射哪个端口。</li><li>示例：EXPOSE 80/tcp 443/udp</li></ul></li><li><p>ENTRYPOINT&amp;CMD：定义容器启动时运行的默认命令。它们协同工作，但优先级和用途略有不同。</p><p>| 指令 | 作用 | 是否可被覆盖 | 推荐用法 | |----------------|--------------------------------------------------------|-----------------------------------------|-----------------------------------------------------------------------------------------------| | <strong>ENTRYPOINT</strong> | 指定容器启动时运行的主命令或可执行文件。它就像是命令的固定前缀部分。定义镜像的核心功能。 | 在docker run时可通过--entrypoint覆盖，但这较少见且不推荐 | ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (exec 形式) | | <strong>CMD</strong> | 指定主命令 (ENTRYPOINT) 的默认参数。为主命令 (ENTRYPOINT) 提供可变的默认参数。 | docker run 后跟的任何内容会完全替代 CMD | CMD [&quot;param1&quot;, &quot;param2&quot;] (作为 ENTRYPOINT 的参数)CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (单独使用时不推荐) |</p><ul><li>常见组合模式： <ul><li>ENTRYPOINT + CMD (推荐)： 这是最常见的模式。</li></ul><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>ENTRYPOINT</span><span class="space"> </span><span>[&quot;/usr/local/bin/myapp&quot;]</span><span class="space"> </span><span>#</span><span class="space"> </span><span>定义主程序</span></span>
<span class="line"><span>CMD</span><span class="space"> </span><span>[&quot;--help&quot;]</span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>#</span><span class="space"> </span><span>定义启动该主程序时默认传递的参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cmd line-numbers-mode" data-ext="cmd" data-title="cmd"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>docker</span><span class="space"> </span><span>run</span><span class="space"> </span><span>my-image：相当于执行</span><span class="space"> </span><span>/usr/local/bin/myapp</span><span class="space"> </span><span>--help</span></span>
<span class="line"><span>docker</span><span class="space"> </span><span>run</span><span class="space"> </span><span>my-image</span><span class="space"> </span><span>run</span><span class="space"> </span><span>--debug：相当于执行</span><span class="space"> </span><span>/usr/local/bin/myapp</span><span class="space"> </span><span>run</span><span class="space"> </span><span>--debug</span><span class="space"> </span><span>（run</span><span class="space"> </span><span>--debug</span><span class="space"> </span><span>完全替换了默认的</span><span class="space"> </span><span>--help）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>只有 ENTRYPOINT： 强制容器以特定方式运行，不接受额外命令作为参数（除非使用 --entrypoint）。</li><li>只有 CMD： 可以直接通过 docker run my-image /bin/bash 等方式完全覆盖启动命令。</li></ul></li><li>最佳实践： <ul><li>优先使用 exec 形式 (JSON 数组)：如 ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;], CMD [&quot;param1&quot;, &quot;param2&quot;]。避免 shell 形式 (ENTRYPOINT executable param1) 导致子进程无法正常接收信号的问题。</li><li>理解二者关系：CMD 提供 ENTRYPOINT 的默认参数。</li></ul></li></ul></li><li><p>VOLUME：创建一个具有指定路径的匿名卷挂载点。当容器启动时，Docker 会自动创建一个匿名卷并挂载到该路径。即使以后容器被删除，该匿名卷也会留存。</p><ul><li>语法：VOLUME [&quot;/data&quot;] 或 VOLUME /data /more/data （多个路径）</li><li>最佳实践： <ul><li>用于标记需要持久化数据的目录（如数据库文件、日志文件）。</li><li>主要作为镜像提供者的建议，告诉用户该目录的数据应该被持久化。通常在实际运行容器时，使用 -v 或 --mount 指定具名卷或主机目录挂载更为常用和可控。</li></ul></li><li>示例：VOLUME /var/lib/mysql</li></ul></li><li><p>ENV：设置容器构建期与运行时的环境变量，以键值对形式持久化嵌入镜像。</p><ul><li>语法：ENV &lt;key&gt;=&lt;value&gt; ...（支持一次设置多个）</li><li>示例：ENV NODE_ENV=production APP_VERSION=1.0.0</li></ul></li><li><p>ARG：声明仅构建阶段有效的临时变量，用于动态注入参数，不保留至运行时。</p><ul><li>语法：ARG &lt;varname&gt;[=&lt;default value&gt;]</li><li>示例：<div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>ARG</span><span class="space"> </span><span>APP_VERSION=latest</span></span>
<span class="line"><span>ENV</span><span class="space"> </span><span>APP_VERSION=$APP_VERSION</span><span class="space"> </span><span>#</span><span class="space"> </span><span>如果需要运行时使用，可将其转存到</span><span class="space"> </span><span>ENV</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>USER(用户切换)：指定后续指令以哪个用户（和可选的用户组）身份运行（RUN, CMD, ENTRYRYPOINT）。默认是 root。</p><ul><li>语法：USER &lt;user&gt;[:&lt;group&gt;] 或 USER &lt;UID&gt;[:&lt;GID&gt;]</li><li>最佳实践： <ul><li>强烈建议创建非 root 用户并在后面切换到它运行应用程序，增强容器安全性（最小权限原则）。</li><li>通常先在某个 RUN 指令中创建好用户和组（并设置合适的权限和目录所有权），再使用 USER。</li></ul></li><li>示例：<div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>RUN</span><span class="space"> </span><span>groupadd</span><span class="space"> </span><span>-r</span><span class="space"> </span><span>myuser</span><span class="space"> </span><span>&amp;&amp;</span><span class="space"> </span><span>useradd</span><span class="space"> </span><span>-r</span><span class="space"> </span><span>-g</span><span class="space"> </span><span>myuser</span><span class="space"> </span><span>myuser</span></span>
<span class="line"><span>WORKDIR</span><span class="space"> </span><span>/app</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>--chown=myuser:myuser</span><span class="space"> </span><span>.</span><span class="space"> </span><span>.</span></span>
<span class="line"><span>USER</span><span class="space"> </span><span>myuser</span></span>
<span class="line"><span>CMD</span><span class="space"> </span><span>[&quot;python&quot;,</span><span class="space"> </span><span>&quot;app.py&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>LABEL(元数据标签)：为镜像嵌入描述性键值对元数据，用于记录作者、许可证等辅助信息。</p><ul><li>标注维护者信息（替代已弃用的 MAINTAINER）</li><li>标记镜像版本、构建日期、依赖组件清单</li><li>CI/CD 系统中追踪构建来源</li></ul></li></ul><h4 id="核心原则" tabindex="-1"><a class="header-anchor" href="#核心原则"><span>核心原则</span></a></h4><ul><li>最小化层数：合并关联的 RUN 指令减少层数（如清理操作合并至同一层）。</li><li>精简构建上下文：利用 .dockerignore 过滤非必要文件。</li><li>确定性构建：避免在构建中引入外部动态变量（版本需固定）。</li><li>无状态化设计：持久化数据应通过 VOLUME 或外部存储卷管理。</li><li>非特权运行：通过 USER 指令避免以 root 身份运行容器进程。</li></ul><h4 id="示例-node-js-应用" tabindex="-1"><a class="header-anchor" href="#示例-node-js-应用"><span>示例（Node.js 应用）</span></a></h4><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>#</span><span class="space"> </span><span>Stage</span><span class="space"> </span><span>1:</span><span class="space"> </span><span>Build</span><span class="space"> </span><span>the</span><span class="space"> </span><span>application</span></span>
<span class="line"><span>FROM</span><span class="space"> </span><span>node:18-bullseye-slim</span><span class="space"> </span><span>AS</span><span class="space"> </span><span>builder</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span><span class="space"> </span><span>Create</span><span class="space"> </span><span>app</span><span class="space"> </span><span>directory</span><span class="space"> </span><span>(WORKDIR</span><span class="space"> </span><span>also</span><span class="space"> </span><span>creates</span><span class="space"> </span><span>it)</span></span>
<span class="line"><span>WORKDIR</span><span class="space"> </span><span>/usr/src/app</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span><span class="space"> </span><span>Install</span><span class="space"> </span><span>app</span><span class="space"> </span><span>build</span><span class="space"> </span><span>dependencies</span><span class="space"> </span><span>(package.json</span><span class="space"> </span><span>and</span><span class="space"> </span><span>lockfile</span><span class="space"> </span><span>first</span><span class="space"> </span><span>for</span><span class="space"> </span><span>better</span><span class="space"> </span><span>caching)</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>package*.json</span><span class="space"> </span><span>./</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>Use</span><span class="space"> </span><span>npm</span><span class="space"> </span><span>ci</span><span class="space"> </span><span>for</span><span class="space"> </span><span>reproducible</span><span class="space"> </span><span>installs</span><span class="space"> </span><span>in</span><span class="space"> </span><span>CI</span><span class="space"> </span><span>environments,</span><span class="space"> </span><span>equivalent</span><span class="space"> </span><span>to</span><span class="space"> </span><span>npm</span><span class="space"> </span><span>install</span><span class="space"> </span><span>with</span><span class="space"> </span><span>lockfile</span></span>
<span class="line"><span>RUN</span><span class="space"> </span><span>npm</span><span class="space"> </span><span>ci</span><span class="space"> </span><span>--only=production</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span><span class="space"> </span><span>Copy</span><span class="space"> </span><span>application</span><span class="space"> </span><span>source</span><span class="space"> </span><span>code</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>.</span><span class="space"> </span><span>.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span><span class="space"> </span><span>Build</span><span class="space"> </span><span>the</span><span class="space"> </span><span>app</span><span class="space"> </span><span>(assuming</span><span class="space"> </span><span>you</span><span class="space"> </span><span>have</span><span class="space"> </span><span>a</span><span class="space"> </span><span>build</span><span class="space"> </span><span>script)</span></span>
<span class="line"><span>RUN</span><span class="space"> </span><span>npm</span><span class="space"> </span><span>run</span><span class="space"> </span><span>build</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span><span class="space"> </span><span>Stage</span><span class="space"> </span><span>2:</span><span class="space"> </span><span>Create</span><span class="space"> </span><span>the</span><span class="space"> </span><span>production</span><span class="space"> </span><span>image</span></span>
<span class="line"><span>FROM</span><span class="space"> </span><span>node:18-bullseye-slim</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span><span class="space"> </span><span>Non-root</span><span class="space"> </span><span>user</span><span class="space"> </span><span>setup</span><span class="space"> </span><span>for</span><span class="space"> </span><span>better</span><span class="space"> </span><span>security</span></span>
<span class="line"><span>RUN</span><span class="space"> </span><span>groupadd</span><span class="space"> </span><span>-r</span><span class="space"> </span><span>nodegroup</span><span class="space"> </span><span>&amp;&amp;</span><span class="space"> </span><span>useradd</span><span class="space"> </span><span>-r</span><span class="space"> </span><span>-g</span><span class="space"> </span><span>nodegroup</span><span class="space"> </span><span>nodeuser</span></span>
<span class="line"><span>RUN</span><span class="space"> </span><span>mkdir</span><span class="space"> </span><span>-p</span><span class="space"> </span><span>/home/node/app</span><span class="space"> </span><span>&amp;&amp;</span><span class="space"> </span><span>chown</span><span class="space"> </span><span>-R</span><span class="space"> </span><span>nodeuser:nodegroup</span><span class="space"> </span><span>/home/node/app</span></span>
<span class="line"><span></span></span>
<span class="line"><span>WORKDIR</span><span class="space"> </span><span>/home/node/app</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span><span class="space"> </span><span>Copy</span><span class="space"> </span><span>only</span><span class="space"> </span><span>necessary</span><span class="space"> </span><span>files</span><span class="space"> </span><span>from</span><span class="space"> </span><span>the</span><span class="space"> </span><span>builder</span><span class="space"> </span><span>stage</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>--chown=nodeuser:nodegroup</span><span class="space"> </span><span>--from=builder</span><span class="space"> </span><span>/usr/src/app/package*.json</span><span class="space"> </span><span>./</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>--chown=nodeuser:nodegroup</span><span class="space"> </span><span>--from=builder</span><span class="space"> </span><span>/usr/src/app/node_modules</span><span class="space"> </span><span>./node_modules</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>--chown=nodeuser:nodegroup</span><span class="space"> </span><span>--from=builder</span><span class="space"> </span><span>/usr/src/app/build</span><span class="space"> </span><span>./build</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span><span class="space"> </span><span>Switch</span><span class="space"> </span><span>to</span><span class="space"> </span><span>non-root</span><span class="space"> </span><span>user</span></span>
<span class="line"><span>USER</span><span class="space"> </span><span>nodeuser</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span><span class="space"> </span><span>Expose</span><span class="space"> </span><span>the</span><span class="space"> </span><span>port</span><span class="space"> </span><span>the</span><span class="space"> </span><span>app</span><span class="space"> </span><span>runs</span><span class="space"> </span><span>on</span></span>
<span class="line"><span>EXPOSE</span><span class="space"> </span><span>3000</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span><span class="space"> </span><span>Define</span><span class="space"> </span><span>the</span><span class="space"> </span><span>startup</span><span class="space"> </span><span>command</span><span class="space"> </span><span>(exec</span><span class="space"> </span><span>form)</span></span>
<span class="line"><span>CMD</span><span class="space"> </span><span>[&quot;node&quot;,</span><span class="space"> </span><span>&quot;build/index.js&quot;]</span><span class="space"> </span><span>#</span><span class="space"> </span><span>Adjust</span><span class="space"> </span><span>path</span><span class="space"> </span><span>to</span><span class="space"> </span><span>your</span><span class="space"> </span><span>main</span><span class="space"> </span><span>entry</span><span class="space"> </span><span>file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="高级指令-技巧" tabindex="-1"><a class="header-anchor" href="#高级指令-技巧"><span>高级指令&amp;技巧</span></a></h4><ul><li>HEALTHCHECK(容器健康检查)：定义容器健康状态检查策略，Docker 引擎会定期执行指定命令检测容器内主进程的健康状态。 <ul><li>作用： <ul><li>为编排系统（如 Kubernetes/Docker Swarm）提供健康状态信息</li><li>支持自动重启不健康的容器</li><li>docker ps 命令可显示健康状态（healthy, unhealthy, starting）</li></ul></li><li>语法：HEALTHCHECK [OPTIONS] CMD &lt;command&gt;</li><li>关键参数： <ul><li>--interval=DURATION (默认 30s)：检查间隔时间</li><li>--timeout=DURATION (默认 30s)：命令超时时间</li><li>--start-period=DURATION (默认 0s)：容器启动后的初始化宽限期（此期间失败不计为不健康）</li><li>--retries=N (默认 3)：连续失败 N 次后标记为不健康</li><li>CMD：执行检查的命令（必须返回退出码：0 - 健康，1 - 不健康）</li></ul></li><li>示例：<div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>#</span><span class="space"> </span><span>检查Web服务端口是否响应</span></span>
<span class="line"><span>HEALTHCHECK</span><span class="space"> </span><span>--interval=30s</span><span class="space"> </span><span>--timeout=3s</span><span class="space"> </span><span>--start-period=5s</span><span class="space"> </span><span>--retries=3</span><span class="space"> </span><span>\\</span></span>
<span class="line"><span>CMD</span><span class="space"> </span><span>curl</span><span class="space"> </span><span>-f</span><span class="space"> </span><span>http://localhost:3000/healthz</span><span class="space"> </span><span>||</span><span class="space"> </span><span>exit</span><span class="space"> </span><span>1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span><span class="space"> </span><span>检查特定进程是否运行</span></span>
<span class="line"><span>HEALTHCHECK</span><span class="space"> </span><span>CMD</span><span class="space"> </span><span>pgrep</span><span class="space"> </span><span>-f</span><span class="space"> </span><span>&quot;node</span><span class="space"> </span><span>app.js&quot;</span><span class="space"> </span><span>&gt;</span><span class="space"> </span><span>/dev/null</span><span class="space"> </span><span>||</span><span class="space"> </span><span>exit</span><span class="space"> </span><span>1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span><span class="space"> </span><span>自定义脚本检查复杂状态</span></span>
<span class="line"><span>HEALTHCHECK</span><span class="space"> </span><span>CMD</span><span class="space"> </span><span>/usr/local/bin/healthcheck.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>最佳实践 <ul><li>所有生产环境关键服务都应配置健康检查</li><li>检查接口应轻量快速，避免消耗过多资源</li><li>在 start-period 中考虑应用初始化时间</li><li>curl 使用 -f / --fail 选项确保 HTTP 错误状态会返回非零退出码</li><li>避免检查过于频繁（间隔至少 10s）</li></ul></li></ul></li><li>多阶段构建：分离构建环境和运行环境，大幅减小最终镜像体积，提升安全性。 <ul><li>工作原理 <ul><li>利用多个 FROM 指令定义多个构建阶段</li><li>每个阶段有独立的环境和上下文</li><li>后续阶段可从前驱阶段复制构建产物（如编译好的二进制文件）</li><li>仅最终阶段的内容会出现在输出镜像中</li></ul></li><li>示例（Node.js 应用）<div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>#</span><span class="space"> </span><span>--------------------</span><span class="space"> </span><span>阶段</span><span class="space"> </span><span>1:</span><span class="space"> </span><span>构建应用</span><span class="space"> </span><span>--------------------</span></span>
<span class="line"><span>FROM</span><span class="space"> </span><span>node:18</span><span class="space"> </span><span>AS</span><span class="space"> </span><span>builder</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>创建工作目录并安装依赖</span></span>
<span class="line"><span>WORKDIR</span><span class="space"> </span><span>/app</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>package*.json</span><span class="space"> </span><span>./</span></span>
<span class="line"><span>RUN</span><span class="space"> </span><span>npm</span><span class="space"> </span><span>ci</span><span class="space"> </span><span>--only=production</span><span class="space"> </span><span>#</span><span class="space"> </span><span>精确安装生产依赖</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>复制源码并构建</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>.</span><span class="space"> </span><span>.</span></span>
<span class="line"><span>RUN</span><span class="space"> </span><span>npm</span><span class="space"> </span><span>run</span><span class="space"> </span><span>build</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>--------------------</span><span class="space"> </span><span>阶段</span><span class="space"> </span><span>2:</span><span class="space"> </span><span>运行环境</span><span class="space"> </span><span>--------------------</span></span>
<span class="line"><span>FROM</span><span class="space"> </span><span>node:18-slim</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>创建非root用户</span></span>
<span class="line"><span>RUN</span><span class="space"> </span><span>groupadd</span><span class="space"> </span><span>-r</span><span class="space"> </span><span>appuser</span><span class="space"> </span><span>&amp;&amp;</span><span class="space"> </span><span>useradd</span><span class="space"> </span><span>-r</span><span class="space"> </span><span>-g</span><span class="space"> </span><span>appuser</span><span class="space"> </span><span>appuser</span></span>
<span class="line"><span>WORKDIR</span><span class="space"> </span><span>/home/appuser</span></span>
<span class="line"><span>RUN</span><span class="space"> </span><span>chown</span><span class="space"> </span><span>-R</span><span class="space"> </span><span>appuser:appuser</span><span class="space"> </span><span>/home/appuser</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>从构建阶段复制产物</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>--chown=appuser:appuser</span><span class="space"> </span><span>--from=builder</span><span class="space"> </span><span>/app/node_modules</span><span class="space"> </span><span>./node_modules</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>--chown=appuser:appuser</span><span class="space"> </span><span>--from=builder</span><span class="space"> </span><span>/app/dist</span><span class="space"> </span><span>./dist</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>使用非root用户</span></span>
<span class="line"><span>USER</span><span class="space"> </span><span>appuser</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>暴露端口和启动命令</span></span>
<span class="line"><span>EXPOSE</span><span class="space"> </span><span>8080</span></span>
<span class="line"><span>CMD</span><span class="space"> </span><span>[&quot;node&quot;,</span><span class="space"> </span><span>&quot;dist/server.js&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>作用 <ul><li>极简镜像：最终镜像只包含运行必备的二进制文件和依赖，没有庞大的开发工具链，构建中间文件等</li><li>增强安全： 攻击面显著减小</li><li>提升效率： 更小的镜像意味着更快的拉取&amp;推送速度，更少的磁盘占用，更快的容器启动</li></ul></li><li>最佳实践 <ul><li>命名阶段： 通过 FROM image AS stage-name 命名阶段，方便跨阶段复制</li><li>仅复制必要文件： 精确控制从哪个阶段复制哪些文件（COPY --from=stage-name /path)</li><li>共享构建缓存： 在 CI/CD 中可复用前阶段构建缓存加速后续构建</li><li>多架构构建： 结合 Buildx 可构建多平台镜像</li></ul></li></ul></li><li>.dockerignore <ul><li>作用 <ul><li>构建速度： 减少发送到 Docker 守护进程的上下文数据量</li><li>构建缓存： 文件变更会影响缓存失效，忽略不需要的文件保持缓存稳定</li><li>安全性： 避免将敏感文件（.env, *.pem, id_rsa）意外打包进镜像</li><li>镜像大小： 防止大文件（.git, node_modules, 日志文件）被意外添加</li></ul></li><li>匹配规则 <ul><li>**/<strong>pycache</strong>：递归匹配所有层级的 <strong>pycache</strong> 目录</li><li>*.md：忽略所有 Markdown 文件</li><li>!docs/README.md：特例排除（不忽略 docs/README.md）</li><li>temp?：匹配 temp1, temp2 等（? = 单个字符）</li><li>/vendor：仅忽略根目录的 vendor 目录（不忽略子目录的）</li></ul></li><li>最佳实践 <ul><li>必须创建： 每个 Docker 项目都应该有 .dockerignore</li><li>全面过滤： 包含所有临时文件、日志、版本控制目录、依赖目录、IDE 配置</li><li>定期审查： 随着项目演进更新忽略规则</li><li>与构建分离： 构建需要的文件应显式复制，而不是依赖上下文</li></ul></li><li>示例<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>#</span><span class="space"> </span><span>忽略文件</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>Dockerfile*</span></span>
<span class="line"><span>docker-compose*</span></span>
<span class="line"><span>.dockerignore</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>忽略目录</span></span>
<span class="line"><span>**/.git</span></span>
<span class="line"><span>**/.vscode</span></span>
<span class="line"><span>**/.idea</span></span>
<span class="line"><span>**/node_modules</span></span>
<span class="line"><span>**/vendor</span></span>
<span class="line"><span>**/__pycache__</span></span>
<span class="line"><span>**/dist</span></span>
<span class="line"><span>**/build</span></span>
<span class="line"><span>**/logs</span></span>
<span class="line"><span>**/.npm</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>忽略特定文件类型</span></span>
<span class="line"><span>*.log</span></span>
<span class="line"><span>*.tmp</span></span>
<span class="line"><span>*.bak</span></span>
<span class="line"><span>*.swp</span></span>
<span class="line"><span>*.env</span></span>
<span class="line"><span>*.secret</span></span>
<span class="line"><span>*.pem</span></span>
<span class="line"><span>*.key</span></span>
<span class="line"><span>*.cert</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>特例保留</span><span class="space"> </span><span>(使用</span><span class="space"> </span><span>!)</span></span>
<span class="line"><span>!config/production.env</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>ARG 与构建时参数：在构建时 (docker build) 注入动态值 <ul><li>用法 <ul><li>环境变量贯通：将在构建时传入的 ARG 值转为运行时 ENV<div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>ARG</span><span class="space"> </span><span>BUILD_TIME_API_URL</span></span>
<span class="line"><span>ENV</span><span class="space"> </span><span>RUNTIME_API_URL=$BUILD_TIME_API_URL</span><span class="space"> </span><span>#</span><span class="space"> </span><span>传递到运行时环境</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>设置基础镜像标签：在 FROM 指令中使用 ARG 定义基础镜像标签，实现动态切换<div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>ARG</span><span class="space"> </span><span>BASE_IMAGE_TAG=alpine</span></span>
<span class="line"><span>FROM</span><span class="space"> </span><span>node:18-$BASE_IMAGE_TAG</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>控制功能开关：通过 ARG 定义环境变量，控制应用行为<div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>ARG</span><span class="space"> </span><span>ENABLE_DEBUG=false</span></span>
<span class="line"><span>RUN</span><span class="space"> </span><span>if</span><span class="space"> </span><span>[</span><span class="space"> </span><span>&quot;$ENABLE_DEBUG&quot;</span><span class="space"> </span><span>=</span><span class="space"> </span><span>&quot;true&quot;</span><span class="space"> </span><span>];</span><span class="space"> </span><span class="space"> </span><span>\\</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>npm</span><span class="space"> </span><span>install</span><span class="space"> </span><span>--save-dev</span><span class="space"> </span><span>debug;</span><span class="space"> </span><span>\\</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>缓存破坏：ARG 定义的参数会影响缓存键，导致缓存失效<div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>ARG</span><span class="space"> </span><span>CACHE_BUSTER</span></span>
<span class="line"><span>RUN</span><span class="space"> </span><span>echo</span><span class="space"> </span><span>&quot;Cache</span><span class="space"> </span><span>buster:</span><span class="space"> </span><span>$CACHE_BUSTER&quot;</span><span class="space"> </span><span>&amp;&amp;</span><span class="space"> </span><span>\\</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>npm</span><span class="space"> </span><span>install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>构建命令：docker build --build-arg CACHE_BUSTER=$(date +%s) ...</li><li>多阶段构建参数传递：在多阶段构建中，ARG 定义的参数可以在后续阶段中使用<div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>ARG</span><span class="space"> </span><span>VERSION=latest</span></span>
<span class="line"><span>FROM</span><span class="space"> </span><span>builder</span><span class="space"> </span><span>AS</span><span class="space"> </span><span>build1</span></span>
<span class="line"><span>ARG</span><span class="space"> </span><span>VERSION</span><span class="space"> </span><span>#</span><span class="space"> </span><span>重新声明以继承构建命令传入的值</span></span>
<span class="line"><span>RUN</span><span class="space"> </span><span>build-with-$VERSION</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>注意事项： <ul><li>安全警告： 不要用 ARG 传递密码、密钥等敏感信息！因为值会保留在镜像历史记录中（可使用 docker history 查看）。敏感信息请使用 Docker Secrets (BuildKit) 或外部挂载。</li><li>作用域： ARG 在定义它的构建阶段结束时就失效了。要在多个阶段使用同一个参数，需要在每个阶段重新定义 ARG。</li><li>构建参数默认值在声明时设置。</li></ul></li></ul></li><li>STOPSIGNAL(自定义停止信号)：指定容器停止时由 docker stop 发送给容器内部 PID 1 进程的信号 <ul><li>语法：STOPSIGNAL &lt;signal&gt; # &lt;signal&gt; 可以是信号名 (如 SIGTERM) 或信号编号 (如 9)。</li><li>使用场景 <ul><li>应用需要特定信号触发优雅关闭（如 SIGINT, SIGHUP）</li><li>调整默认的超时机制不适用时</li></ul></li><li>示例<div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>#</span><span class="space"> </span><span>通知应用使用</span><span class="space"> </span><span>SIGINT</span><span class="space"> </span><span>(Ctrl+C</span><span class="space"> </span><span>的信号)</span><span class="space"> </span><span>优雅停止</span></span>
<span class="line"><span>STOPSIGNAL</span><span class="space"> </span><span>SIGINT</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>强制快速关闭</span><span class="space"> </span><span>(不推荐，应优先考虑优雅关闭)</span></span>
<span class="line"><span>STOPSIGNAL</span><span class="space"> </span><span>SIGKILL</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>最佳实践 <ul><li>优先让应用响应标准的 SIGTERM 信号</li><li>仅在应用有特殊关闭需求时才配置 STOPSIGNAL</li><li>结合 docker stop -t &lt;seconds&gt; 调整超时时间</li><li>避免直接使用 SIGKILL： 它不会给应用任何清理机会，可能导致数据损坏。</li></ul></li></ul></li><li>LABEL(组织镜像元数据)：向镜像添加键值对形式的元数据‘ <ul><li>用途 <ul><li>记录维护者信息</li><li>标识软件版本、源码仓库</li><li>指定许可证信息</li><li>遵循 OCI 镜像规范 (opencontainers.org)</li><li>便于自动化工具管理 / 筛选镜像</li></ul></li><li>语法：LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</li><li>示例<div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>LABEL</span><span class="space"> </span><span>org.opencontainers.image.authors=&quot;devops@company.com&quot;</span></span>
<span class="line"><span>LABEL</span><span class="space"> </span><span>org.opencontainers.image.description=&quot;High-performance</span><span class="space"> </span><span>web</span><span class="space"> </span><span>server&quot;</span></span>
<span class="line"><span>LABEL</span><span class="space"> </span><span>org.opencontainers.image.version=&quot;v1.5.2&quot;</span></span>
<span class="line"><span>LABEL</span><span class="space"> </span><span>org.opencontainers.image.source=&quot;https://github.com/company/webserver&quot;</span></span>
<span class="line"><span>LABEL</span><span class="space"> </span><span>org.opencontainers.image.licenses=&quot;Apache-2.0&quot;</span></span>
<span class="line"><span>LABEL</span><span class="space"> </span><span>com.company.component=&quot;auth-service&quot;</span></span>
<span class="line"><span>LABEL</span><span class="space"> </span><span>maintainer=&quot;Engineering</span><span class="space"> </span><span>Team</span><span class="space"> </span><span>&lt;eng@example.io&gt;&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>最佳实践 <ul><li>使用有意义的命名空间（如 org.opencontainers.image.<em>, com.company.</em>)</li><li>提供有价值的描述信息和联系点</li><li>保持一致性，便于管理</li></ul></li></ul></li><li>ONBUILD(下游镜像触发器)：在当前镜像被用作另一个 Dockerfile 的 FROM 基础镜像时，自动在构建下游镜像时触发特定的指令 <ul><li>使用场景： 创建需要在构建新镜像时执行特定操作的基础镜像（常见于框架或语言基础镜像）。</li><li>语法：ONBUILD &lt;INSTRUCTION&gt;</li><li>示例（创建一个 Node 应用基础镜像）<div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>#</span><span class="space"> </span><span>Node</span><span class="space"> </span><span>基础镜像</span><span class="space"> </span><span>Dockerfile</span></span>
<span class="line"><span>FROM</span><span class="space"> </span><span>node:18-slim</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>安装一些全局需要的工具</span></span>
<span class="line"><span>RUN</span><span class="space"> </span><span>...</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>定义触发指令</span></span>
<span class="line"><span>ONBUILD</span><span class="space"> </span><span>COPY</span><span class="space"> </span><span>package.json</span><span class="space"> </span><span>package-lock.json</span><span class="space"> </span><span>./</span></span>
<span class="line"><span>ONBUILD</span><span class="space"> </span><span>RUN</span><span class="space"> </span><span>npm</span><span class="space"> </span><span>ci</span></span>
<span class="line"><span>ONBUILD</span><span class="space"> </span><span>COPY</span><span class="space"> </span><span>.</span><span class="space"> </span><span>.</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>定义默认命令</span></span>
<span class="line"><span>CMD</span><span class="space"> </span><span>[&quot;npm&quot;,</span><span class="space"> </span><span>&quot;start&quot;]</span></span>
<span class="line"><span>------------------------------------------------</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>当基于此镜像构建新项目镜像时：</span></span>
<span class="line"><span>FROM</span><span class="space"> </span><span>my-custom-node-base</span></span>
<span class="line"><span>#</span><span class="space"> </span><span>此时会自动触发</span><span class="space"> </span><span>ONBUILD</span><span class="space"> </span><span>指令：</span></span>
<span class="line"><span>#</span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>COPY</span><span class="space"> </span><span>package.json</span><span class="space"> </span><span>package-lock.json</span><span class="space"> </span><span>./</span></span>
<span class="line"><span>#</span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>RUN</span><span class="space"> </span><span>npm</span><span class="space"> </span><span>ci</span></span>
<span class="line"><span>#</span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>COPY</span><span class="space"> </span><span>.</span><span class="space"> </span><span>.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>注意事项 <ul><li>使构建行为更隐晦（用户可能不了解 ONBUILD 做了什么）。文档务必清晰！</li><li>过度使用会使基础镜像不灵活。</li><li>在当今更推荐使用多阶段构建和清晰 Dockerfile 的趋势下，ONBUILD 的使用频率有所降低。</li><li>考虑替代方案：提供明确的构建脚本或模板 Dockerfile。</li></ul></li><li>最佳实践 <ul><li>清晰文档： 在使用 ONBUILD 的基础镜像中明确说明触发了哪些操作。</li><li>谨慎使用： 只在操作逻辑紧密绑定于基础镜像目的时才使用（例如自动设置源文件结构）。</li><li>避免复杂逻辑： 保持 ONBUILD 指令简单直接（如 COPY, RUN 基本命令）。避免复杂的脚本或状态依赖。</li><li>替代方案优先： 考虑提供项目模板（Dockerfile.template）或脚手架工具是否更合适。</li></ul></li></ul></li></ul><h3 id="镜像-image" tabindex="-1"><a class="header-anchor" href="#镜像-image"><span>镜像(Image)</span></a></h3><p>不可变交付单元。</p><h3 id="容器-container" tabindex="-1"><a class="header-anchor" href="#容器-container"><span>容器(Container)</span></a></h3><p>标准化运行环境。</p><h3 id="仓库-registry" tabindex="-1"><a class="header-anchor" href="#仓库-registry"><span>仓库(Registry)</span></a></h3><p>资产存储与分发枢纽。</p>`,30)])])}const r=a(l,[["render",c]]),t=JSON.parse(`{"path":"/article/hoqprlfx/","title":"工作扫盲之Docker","lang":"zh-CN","frontmatter":{"title":"工作扫盲之Docker","createTime":"2025/08/12 22:02:27","permalink":"/article/hoqprlfx/","description":"入职新工作接触到了Docker 很高兴终于能干中学Docker了 所以这里就简单记录一下Docker的基础概念 OK Let's Dive in!🤿 核心概念 以下是使用Docker的企业级应用发布流程 A：开发Dockerfile 定义应用环境 B：构建可重复的镜像（Image） D：推送至仓库（Registry）进行版本管理 H：拉取镜像并实例化...","head":[["meta",{"property":"og:url","content":"https://callmeexiao.baby/article/hoqprlfx/"}],["meta",{"property":"og:site_name","content":"Exiao's Blog"}],["meta",{"property":"og:title","content":"工作扫盲之Docker"}],["meta",{"property":"og:description","content":"入职新工作接触到了Docker 很高兴终于能干中学Docker了 所以这里就简单记录一下Docker的基础概念 OK Let's Dive in!🤿 核心概念 以下是使用Docker的企业级应用发布流程 A：开发Dockerfile 定义应用环境 B：构建可重复的镜像（Image） D：推送至仓库（Registry）进行版本管理 H：拉取镜像并实例化..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-18T02:50:45.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-18T02:50:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工作扫盲之Docker\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-18T02:50:45.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":15.61,"words":4683},"git":{"updatedTime":1755485445000,"contributors":[{"name":"Shepherd From Home","username":"Shepherd From Home","email":"574355578@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Shepherd From Home?v=4","url":"https://github.com/Shepherd From Home"},{"name":"Exiao","username":"Exiao","email":"exiao@ptkj.net","commits":9,"avatar":"https://avatars.githubusercontent.com/Exiao?v=4","url":"https://github.com/Exiao"}]},"autoDesc":true,"filePathRelative":"后端技术/工作扫盲之Docker.md","categoryList":[{"id":"543517","sort":10000,"name":"后端技术"}]}`);export{r as comp,t as data};
